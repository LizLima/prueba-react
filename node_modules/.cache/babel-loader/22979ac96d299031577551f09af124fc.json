{"ast":null,"code":"var _jsxFileName = \"/home/liz/Documents/github2/prueba-react/src/view/Cart.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, ThemeProvider } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Products from '../assets/products.json';\nimport Product from '../component/Product';\nimport ItemCart from '../component/ItemCart';\nexport default class Cart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.roundValue = value => {\n      let roundValue = Math.round(value * 100) / 100;\n      return roundValue;\n    };\n\n    this.addToCart = item => {\n      let itemsCard = this.state.itemsCart; // find item into  itemsCart\n\n      let flagFind = false;\n      let total = 0;\n\n      for (let i = 0; i < itemsCard.length; i++) {\n        if (itemsCard[i].id === item.id) {\n          itemsCard[i].count = itemsCard[i].count + 1;\n          flagFind = true;\n        }\n\n        total += itemsCard[i].price.amount * itemsCard[i].count;\n      }\n\n      if (!flagFind) {\n        item.count = 1;\n        itemsCard.push(item);\n        total += item.price.amount * 1;\n      }\n\n      this.setState({\n        itemsCard: this.state.itemsCart = itemsCard,\n        total: this.state.total = this.roundValue(total)\n      });\n    };\n\n    this.deleteFromCart = item => {\n      let itemsCard = this.state.itemsCart;\n      let newItems = [];\n      let total = 0;\n\n      for (let i = 0; i < itemsCard.length; i++) {\n        if (itemsCard[i].id !== item.id) {\n          newItems.push(itemsCard[i]);\n          total += itemsCard[i].price.amount * itemsCard[i].count;\n        }\n      }\n\n      this.setState({\n        itemsCard: this.state.itemsCart = newItems,\n        total: this.state.total = this.roundValue(total)\n      });\n    };\n\n    this.state = {\n      items: [],\n      itemsCart: [],\n      total: 0.00\n    };\n  }\n\n  componentDidMount() {\n    // Divide price\n    Products.products.map(item => {\n      // item.price.partInt = Math.floor(item.price.amount);\n      // item.price.partDecimal = Math.round( (item.price.amount - item.price.partInt) * 100 ) / 100;\n      item.price.stringAmount = String(item.price.amount).split(\".\");\n    });\n    this.setState({\n      items: Products.products\n    });\n  }\n\n  render() {\n    const {\n      items,\n      itemsCart,\n      total\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      sm: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, items.map((item, idx) => {\n      return /*#__PURE__*/React.createElement(Product, {\n        key: item.id,\n        item: item,\n        addItem: this.addToCart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 40\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(Col, {\n      sm: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box-cart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    }, \"Kosarica\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, itemsCart.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 37\n      }\n    }, \"No hay productos en su carrito de compras.\"), itemsCart.map((item, idx) => {\n      return /*#__PURE__*/React.createElement(ItemCart, {\n        key: item.id,\n        item: item,\n        deleteItem: this.deleteFromCart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 44\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box-total\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, \"Ukupan iznos:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, total, \" kn\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/liz/Documents/github2/prueba-react/src/view/Cart.js"],"names":["React","Component","Row","Col","ThemeProvider","Products","Product","ItemCart","Cart","constructor","props","roundValue","value","Math","round","addToCart","item","itemsCard","state","itemsCart","flagFind","total","i","length","id","count","price","amount","push","setState","deleteFromCart","newItems","items","componentDidMount","products","map","stringAmount","String","split","render","idx"],"mappings":"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","sourcesContent":["import React, { Component }  from 'react';\nimport { Row, Col, ThemeProvider } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Products from '../assets/products.json';\nimport Product from '../component/Product';\nimport ItemCart from '../component/ItemCart';\n\n\nexport default class Cart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            itemsCart: [],\n            total: 0.00\n        }\n    }\n\n    componentDidMount() {\n        \n        // Divide price\n        Products.products.map((item) => {\n            // item.price.partInt = Math.floor(item.price.amount);\n            // item.price.partDecimal = Math.round( (item.price.amount - item.price.partInt) * 100 ) / 100;\n            item.price.stringAmount = String(item.price.amount).split(\".\");\n        });\n        this.setState({\n            items: Products.products\n        });  \n    }\n\n    roundValue = (value) => {\n        let roundValue = Math.round( value * 100 ) / 100;\n\n        return roundValue;\n    }\n\n    addToCart = (item) => {\n        \n        let itemsCard = this.state.itemsCart;\n\n        // find item into  itemsCart\n        let flagFind = false;\n        let total = 0;\n        for(let i = 0; i < itemsCard.length ; i++) {\n            if(itemsCard[i].id === item.id) {\n                itemsCard[i].count = itemsCard[i].count + 1;\n                flagFind = true;\n            }\n            total += itemsCard[i].price.amount*itemsCard[i].count;\n        }\n       \n        if(!flagFind)  {\n            item.count = 1;\n            itemsCard.push(item);\n            total += item.price.amount*1;\n        }\n        \n        this.setState({\n            itemsCard: this.state.itemsCart = itemsCard,\n            total: this.state.total = this.roundValue(total)\n        });\n    }\n\n    deleteFromCart =(item) => {\n\n        let itemsCard = this.state.itemsCart;\n        let newItems = [];\n        let total = 0;\n        for(let i = 0; i < itemsCard.length ; i++) {\n            if(itemsCard[i].id !== item.id) {\n                newItems.push(itemsCard[i]);\n                total += itemsCard[i].price.amount*itemsCard[i].count;\n            }\n        }\n       \n        this.setState({\n            itemsCard: this.state.itemsCart = newItems,\n            total: this.state.total = this.roundValue(total)\n        });\n    }\n\n    render() {\n\n        const { items, itemsCart, total } = this.state;\n        return (\n            <div className=\"container\">\n               <Row>\n                   <Col sm={8}>\n                        <div className=\"box-wrap\">\n                            {items.map((item, idx) => {\n                                return(<Product key={item.id} item={item} addItem={this.addToCart}></Product>);\n                            })}\n                        </div>\n                   </Col>\n                   <Col sm={4}>\n                        <div className=\"box-cart\">\n                            <p>Kosarica</p>\n                            <div className=\"cart-items\">\n                                {itemsCart.length === 0 && \n                                    <p>No hay productos en su carrito de compras.</p>\n                                }\n                                {itemsCart.map((item, idx) => {\n                                    return(<ItemCart key={item.id} item={item} deleteItem={this.deleteFromCart}></ItemCart>);\n                                })}\n                            </div>\n                            \n                        </div>\n                        <hr></hr>\n                        <div className=\"box-total\">\n                            <p>Ukupan iznos:</p>\n                            <p>{total} kn</p>\n                        </div>\n                   </Col>\n               </Row>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}